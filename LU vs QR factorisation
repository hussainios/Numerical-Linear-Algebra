import numpy as np

def LU(matrix, size, b):
    print('starting LU')
    U = matrix.copy().astype(float)
    L = np.identity(size)
    P = np.identity(size)

    for i in range(size):
        # pivot
        pivot = np.argmax(abs(U[i:, i])) + i
        if pivot != i:
            U[[i, pivot], :] = U[[pivot, i], :]
            P[[i, pivot], :] = P[[pivot, i], :]
            if i > 0:
                L[[i, pivot], :i] = L[[pivot, i], :i]

        for j in range(i+1, size):
            L[j, i] = U[j, i]/U[i, i]
            U[j, i:] -= L[j, i] * U[i, i:]

    print('solving LU')

    # Step 1: Forward substitution to solve L * y = P * b
    Pb = np.dot(P, b)
    y = np.zeros(size)
    for i in range(size):
        y[i] = Pb[i] - np.dot(L[i, :i], y[:i])

    # Step 2: Backward substitution to solve U * x = y
    x = np.zeros(size)
    for i in range(size-1, -1, -1):
        x[i] = (y[i] - np.dot(U[i, i+1:], x[i+1:])) / U[i, i]

    return x



def QR(matrix, b):
    print('starting qr')

    n, m = matrix.shape

    Q = np.eye(n)
    R = matrix.copy()

    for i in range(n):
        a_k = R[i:n, i]

        norm_a_k = np.linalg.norm(a_k)

        if a_k[0] > 0:
            v = a_k + norm_a_k * np.eye(len(a_k), 1)[:, 0]
        else:
            v = a_k + norm_a_k * np.eye(len(a_k), 1)[:, 0]
        
        v /= np.linalg.norm(v)

        H_k = np.eye(n)

        # Apply the Householder transformation to R in place
        R[i:n, i:] -= 2 * np.outer(v, v @ R[i:n, i:])

        # Update Q with the transpose of the Householder reflection in place
        Q[:, i:n] -= 2 * np.outer(Q[:, i:n] @ v, v)
    print('solving QR')

    x = np.zeros(m)
    b = np.dot(Q.T, b)

    for i in range(m-1, -1, -1):  # Loop backwards for back substitution
        x[i] = (b[i] - np.dot(R[i, i+1:], x[i+1:])) / R[i, i]
    
    return x



size = 3000


matrix = np.random.rand(size, size)
target = np.random.rand(size)
control = np.random.rand(size)

controlerror = np.linalg.norm(matrix @ control - target)/ np.linalg.norm(target)
print('control error is ,', controlerror)

x2 = QR(matrix, target)


errorqr = np.linalg.norm(matrix @ x2 - target)/ np.linalg.norm(target)
print('qr error is ', errorqr)

x = LU(matrix, size, target)
errorlu = np.linalg.norm(matrix @ x - target)/ np.linalg.norm(target)
print('lu error is ', errorlu)
